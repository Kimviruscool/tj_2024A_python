# 3_집합.py
# - 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
# - 중복을 허용하지 않는다. 순서가 없다.
# - 사용처 :
# 1.중복이 불가능 하므로 중복제거 필터로 종종 사용된다.
# 2. 수학에서 집합 표현 

#(1) 집합의 형태
s1 = set([1,2,3])
print(s1) #{1, 2, 3}

s2 = set("Hello")
print(s2) #{'e', 'l', 'o', 'H'} , 실행할 때 마다 순서는 랜덤 으로 배치


#(2) 집합은 인덱싱이 없다, 리스트/튜플 로 타입 변환후 인덱싱 사용,
l1 = list(s1) #list(요소) : 해당 요소를 리스트 타입 으로 반환 함수
print(l1) #[1, 2, 3]
t1 = tuple(s1) #tuple(요소) : 해당 요소를 튜플 타입 으로 반환 함수
print(t1) #(1, 2, 3)

#(3) 교집합 , 합집합 , 차집합 구하기
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])
#1. 교집합
print(s1 & s2) #{4, 5, 6} : 중복 되는 수 (4,5,6) 출력
print(s1.intersection(s2)) #{4, 5, 6} : '중복 되는 수 출력
#2. 합집합
print(s1 | s2) #{1, 2, 3, 4, 5, 6, 7, 8, 9} : 중복된 값은 1개씩만 출력
print(s1.union(s2)) #{1, 2, 3, 4, 5, 6, 7, 8, 9} : 중복된 값은 1개씩만 출력
#3. 차집합
print(s1 - s2) #{1, 2, 3} s1의 값과 중복된 값 모두 제외 하고 출력
print(s1.difference(s2)) #{1, 2, 3}
print(s2 - s1) #{8, 9, 7}
print(s2.difference(s1)) #{8, 9, 7}

#(4) 집합 관련 함수
#1. .add(요소) : 집합 내 요소 추가
s1.add(7)
print(s1) #{1, 2, 3, 4, 5, 6, 7}
#2. .update([요소1, 요소2, 요소3]) : 집합 내 여러개 요소 추가
s1.update([8,9,10])
print(s1) #{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
#3. .remove(요소) : 집합 내 요소 삭제
s1.remove(8)
print(s1) #{1, 2, 3, 4, 5, 6, 7, 9, 10}
# s1.remove(11)
# print(s1) #KeyError: 11 , 집합 내 존재 하지 않는 요소 이므로 예외(Error) 발생